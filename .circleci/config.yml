version: 2.1

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ci_machine: &CI_MACHINE_IMAGE ubuntu-1604:201903-01

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"
    BUILD_IMAGE: *GOLANG_IMAGE

  filters: &FILTERS
    branches:
      only:
        - /^release-.*/
        - qa

  filters-checks: &FILTERS_CHECK
    branches:
      only:
        - master
        - /^release-.*/
        - qa
        - /^pull\/.*$/

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

executors:
  ritchie-server-executor:
    machine:
      image: *CI_MACHINE_IMAGE
    working_directory: ~/workspace

  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: ~/workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

jobs:
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b go/bin/ v1.24.0
      - run: go mod download
      - run:
          name: lint
          command: |
            go/bin/golangci-lint run
  test:
    executor: ritchie-server-executor
    environment:
      <<: *ENVIRONMENT
    steps:

      - checkout

      - run:
          name: Running test
          command: |
            mkdir -p $TEST_RESULTS_DIR
            docker-compose -f docker-compose-ci.yml run server

      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  security_test:
    machine: true
    steps:
      - run:
          name: "Horus Security Analysis"
          command: |
            echo "Starting..."
            docker run --rm -e HORUS_CLIENT_REPO_URL=$HORUS_CLIENT_REPO_URL -e HORUS_CLIENT_REPO_BRANCH=$HORUS_CLIENT_REPO_BRANCH -e HORUS_CLIENT_API_ADDR=$HORUS_CLIENT_API_ADDR -e HORUS_CLIENT_TOKEN=$HORUS_CLIENT_TOKEN -e HORUS_CLIENT_API_USE_HTTPS=$HORUS_CLIENT_API_USE_HTTPS -e HORUS_VULNERABILITY_CHECK=$HORUS_VULNERABILITY_CHECK horuszup/horus-client:latest

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            make build
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  docker:
    executor: ritchie-server-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Creating docker image
          command: |
            . ./version.sh
            . ./registry.sh
            make build-container
      - run:
          name: Pushing docker image to registry
          command: |
            . ./version.sh
            . ./registry.sh
            . ./credentials.sh
            make publish
  release:
    environment:
      <<: *ENVIRONMENT
    executor: delivery-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./version.sh
            make release


workflows:
  build_and_test:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK
      - test:
          filters:
            <<: *FILTERS_CHECK
      - security_test:
          filters:
            <<: *FILTERS_CHECK      
      - build:
          filters:
            <<: *FILTERS
          requires:
            - test
            - lint
            - security_test  
      - docker:
          filters:
            <<: *FILTERS
          requires:
            - build
      - release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build
